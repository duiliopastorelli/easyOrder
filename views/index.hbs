<div id="justOrder" v-if="loaded">

    <p class="temp-message"
       :class="{'temp-message--error': tempMessage.isError,
       'temp-message--notify' : tempMessage.isNotify}"
       v-if="tempMessage">${tempMessage.content}</p>

    <h1>{{title}}</h1>

    <template v-if="status === 'init'">
        <p>Welcome to {{title}}</p>
        <a href="#"
           class="btn btn--green"
           @click.prevent="newOrderCollection"
        >New order collection</a>
    </template>

    <template v-if="status === 'orderMan'">
        <h2>Order: ${orderCollectionData._id}</h2>
        <label for="menuLink">Menu link</label>
        <input id="menuLink" type="text" v-model="orderCollectionData.menuLink" autofocus>
        <a href="#"
           @click.prevent="amendOrderCollection">Amend order</a>
    </template>
</div>

<script>
    let myApp = new Vue({
        delimiters: ['${', '}'],
        el: '#justOrder',
        data: {
            loaded: false,
            status: 'init',
            orderCollectionData: {},
            tempMessage: {
                content: false,
                isError: false,
                isNotify: false
            },
            tempMessageClass: ""
        },
        methods: {
            newOrderCollection() {
                let data = {menuLink: 'example'};

                fetch('/orderCollection', {
                    method: 'POST',
                    body: JSON.stringify(data),
                    headers: new Headers({
                        'Content-Type': 'application/json'
                    })
                })
                        .catch(error =>
                                this.displayTempMessage(error, 'error'))
                        .then(res => this.orderCollectionData = res.json())
                        .then(res => {
                            this.orderCollectionData = res.result;
                            this.status = 'orderMan';
                            this.displayTempMessage("Order created",
                                    'notify')
                        });
            },
            amendOrderCollection() {
                let data = this.orderCollectionData;
                fetch('/orderCollection/' + this.orderCollectionData._id, {
                    method: 'PATCH',
                    body: JSON.stringify(data),
                    headers: new Headers({
                        'Content-Type': 'application/json'
                    })
                })
                        .catch(error =>
                                this.displayTempMessage(error, 'error'))
                        .then(() => {
                            this.displayTempMessage("Order amended",
                                    'notify')
                        });
            },
            displayTempMessage(message, code) {
                //Assign proper style
                if (code === 'error') {
                    this.tempMessage.isError = true;
                } else {
                    this.tempMessage.isNotify = true;
                }
                //Assign the content to display
                this.tempMessage.content = message;
                setTimeout(() => {
                    //Reset the status
                    this.tempMessage.content = false;
                    this.tempMessage.isError = false;
                    this.tempMessage.isNotify = false;
                }, 2000)
            }
        },
        mounted() {
            this.loaded = true
        }
    })
</script>